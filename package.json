// put this file in ~/.vscode-oss/extensions/nadako.vshaxe-2.4.5
{
	"name": "vshaxe",
	"version": "2.4.5",
	"publisher": "nadako",
	"engines": {
		"vscode": "^1.25.0"
	},
	"displayName": "Haxe",
	"description": "Haxe language support",
	"categories": [
		"Programming Languages",
		"Linters",
		"Formatters"
	],
	"galleryBanner": {
		"theme": "dark",
		"color": "#A84B38"
	},
	"badges": [
		{
			"url": "https://api.travis-ci.org/vshaxe/vshaxe.svg?branch=master",
			"href": "https://travis-ci.org/vshaxe/vshaxe",
			"description": "Travis CI Status"
		}
	],
	"icon": "images/haxe-logo.png",
	"author": "Dan Korostelev",
	"license": "MIT",
	"dependencies": {
		"vscode-languageclient": "5.1.0",
		"copy-paste": "^1.3.0"
	},
	"bugs": "https://github.com/vshaxe/vshaxe/issues",
	"homepage": "https://github.com/vshaxe/vshaxe/blob/master/README.md",
	"repository": {
		"type": "git",
		"url": "https://github.com/vshaxe/vshaxe.git"
	},
	"scripts": {
		"vscode:prepublish": "haxelib run vshaxe-build -t vshaxe -t language-server-tests -t tm-language"
	},
	"main": "bin/client.js",
	"activationEvents": [
		"onLanguage:haxe",
		"onCommand:haxe.restartLanguageServer",
		"onCommand:haxe.initProject",
		"onCommand:haxe.selectDisplayConfiguration",
		"onCommand:haxe.debugSelectedConfiguration",
		"onCommand:haxe.selectDisplayArgumentsProvider",
		"onCommand:haxe.runGlobalDiagnostics",
		"onCommand:haxe.toggleCodeLens",
		"onCommand:haxe.dependencies.refresh",
		"onCommand:haxe.dependencies.collapseAll",
		"onCommand:workbench.action.tasks.runTask",
		"onView:haxe.methods",
		"onView:haxe.dependencies",
		"workspaceContains:*.hxml"
	],
	"contributes": {
		"configuration": {
			"title": "Haxe",
			"properties": {
				"haxe.executable": {
					"scope": "resource",
					"description": "Path to the Haxe executable or an object containing a Haxe executable configuration",
					"default": "haxe4",
					"oneOf": [
						{
							"type": "string",
							"description": "Path to the Haxe executable",
							"default": "haxe"
						},
						{
							"type": "object",
							"description": "Haxe executable configuration",
							"additionalProperties": false,
							"properties": {
								"path": {
									"type": "string",
									"description": "Path to the Haxe executable",
									"default": "haxe"
								},
								"env": {
									"description": "Additional environment variables used for running Haxe executable",
									"type": "object",
									"default": {},
									"additionalProperties": {
										"type": "string"
									}
								},
								"windows": {
									"description": "Windows-specific path to the Haxe executable or an object containing a Haxe executable configuration",
									"default": "haxe",
									"oneOf": [
										{
											"type": "string",
											"description": "Path to the Haxe executable",
											"default": "haxe"
										},
										{
											"type": "object",
											"description": "Overrides for Windows",
											"default": {},
											"additionalProperties": false,
											"properties": {
												"path": {
													"type": "string",
													"description": "Path to the Haxe executable",
													"default": "haxe"
												},
												"env": {
													"description": "Additional environment variables used for running Haxe executable",
													"type": "object",
													"default": {},
													"additionalProperties": {
														"type": "string"
													}
												}
											}
										}
									]
								},
								"linux": {
									"description": "Linux-specific path to the Haxe executable or an object containing a Haxe executable configuration",
									"default": "haxe",
									"oneOf": [
										{
											"type": "string",
											"description": "Path to the Haxe executable",
											"default": "haxe"
										},
										{
											"type": "object",
											"description": "Overrides for Linux",
											"default": {},
											"additionalProperties": false,
											"properties": {
												"path": {
													"type": "string",
													"description": "Path to the Haxe executable",
													"default": "haxe"
												},
												"env": {
													"description": "Additional environment variables used for running Haxe executable",
													"type": "object",
													"default": {},
													"additionalProperties": {
														"type": "string"
													}
												}
											}
										}
									]
								},
								"osx": {
									"description": "Mac-specific path to the Haxe executable or an object containing a Haxe executable configuration",
									"default": "haxe",
									"oneOf": [
										{
											"type": "string",
											"description": "Path to the Haxe executable",
											"default": "haxe"
										},
										{
											"type": "object",
											"description": "Overrides for Mac",
											"default": {},
											"additionalProperties": false,
											"properties": {
												"path": {
													"type": "string",
													"description": "Path to the Haxe executable",
													"default": "haxe"
												},
												"env": {
													"description": "Additional environment variables used for running Haxe executable",
													"type": "object",
													"default": {},
													"additionalProperties": {
														"type": "string"
													}
												}
											}
										}
									]
								}
							}
						}
					]
				},
				"haxe.displayConfigurations": {
					"description": "Array of switchable configurations for the Haxe completion server. Each configuration is an array of command-line arguments, see item documentation for more details.",
					"type": "array",
					"default": [],
					"items": {
						"description": "Command-line arguments passed to the Haxe completion server. Can contain HXML files. Relative paths will be resolved against workspace root.",
						"oneOf": [
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							{
								"type": "object",
								"additionalProperties": false,
								"properties": {
									"label": {
										"type": "string",
										"description": "The label to use for displaying this configuration in the UI."
									},
									"args": {
										"type": "array",
										"description": "The Haxe command-line arguments.",
										"items": {
											"type": "string"
										}
									}
								}
							}
						]
					}
				},
				"haxe.displayServer": {
					"description": "Haxe completion server configuration",
					"type": "object",
					"default": {},
					"additionalProperties": false,
					"properties": {
						"arguments": {
							"description": "Array of arguments passed to the Haxe completion server at start. Can be used for debugging completion server issues, for example by adding \"-v\" argument.",
							"type": "array",
							"default": [],
							"items": {
								"type": "string"
							}
						},
						"print": {
							"description": "Which debug output to print to the Haxe output channel. With \"-v\", all flags default to true, and without it to false. Setting a flag here overrides the default. Only works with Haxe 4.0.0-preview.4 or newer.",
							"type": "object",
							"default": {
								"completion": false,
								"reusing": false
							},
							"additionalProperties": false,
							"properties": {
								"addedDirectory": {
									"type": "boolean"
								},
								"foundDirectories": {
									"type": "boolean"
								},
								"changedDirectories": {
									"type": "boolean"
								},
								"modulePathChanged": {
									"type": "boolean"
								},
								"notCached": {
									"type": "boolean"
								},
								"parsed": {
									"type": "boolean"
								},
								"removedDirectory": {
									"type": "boolean"
								},
								"reusing": {
									"type": "boolean"
								},
								"skippingDep": {
									"type": "boolean"
								},
								"unchangedContent": {
									"type": "boolean"
								},
								"cachedModules": {
									"type": "boolean"
								},
								"arguments": {
									"type": "boolean"
								},
								"completion": {
									"type": "boolean"
								},
								"defines": {
									"type": "boolean"
								},
								"signature": {
									"type": "boolean"
								},
								"displayPosition": {
									"type": "boolean"
								},
								"stats": {
									"type": "boolean"
								},
								"message": {
									"type": "boolean"
								},
								"socketMessage": {
									"type": "boolean"
								},
								"uncaughtError": {
									"type": "boolean"
								},
								"newContext": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"haxe.displayPort": {
					"description": "Integer value for the port to open on the display server, or \"auto\". Can be used to --connect Haxe build commands.",
					"default": "auto",
					"oneOf": [
						{
							"type": "integer"
						},
						{
							"type": "string",
							"enum": [
								"auto"
							]
						}
					]
				},
				"haxe.enableCompilationServer": {
					"description": "Use the extension's Haxe server to compile auto-generated tasks. Requires \"haxe.displayPort\" to be set.",
					"type": "boolean",
					"default": true
				},
				"haxe.taskPresentation": {
					"description": "Configures which presentation options to use for generated tasks by default (see `presentation` in `tasks.json`).",
					"type": "object",
					"default": {
						"echo": true,
						"reveal": "always",
						"focus": false,
						"panel": "shared",
						"showReuseMessage": true
					},
					"additionalProperties": false,
					"properties": {
						"echo": {
							"description": "Controls whether the executed command is echoed to the panel. Default is true.",
							"type": "boolean",
							"default": true
						},
						"reveal": {
							"description": "Controls whether the panel running the task is revealed or not. Default is \"always\".",
							"type": "string",
							"default": "always",
							"enum": [
								"always",
								"silent",
								"never"
							],
							"enumDescriptions": [
								"Always reveals the terminal when this task is executed.",
								"Only reveals the terminal if no problem matcher is associated with the task and an errors occurs executing it.",
								"Never reveals the terminal when this task is executed."
							]
						},
						"focus": {
							"description": "Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.",
							"type": "boolean",
							"default": false
						},
						"panel": {
							"description": "Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.",
							"type": "string",
							"default": "shared",
							"enum": [
								"shared",
								"dedicated",
								"new"
							]
						},
						"showReuseMessage": {
							"description": "Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.",
							"type": "boolean",
							"default": true
						}
					}
				},
				"haxe.enableCodeLens": {
					"description": "Enable code lens to show some statistics",
					"type": "boolean",
					"default": false
				},
				"haxe.enableDiagnostics": {
					"description": "Enable automatic diagnostics of Haxe files, run automatically on open and save.",
					"type": "boolean",
					"default": true
				},
				"haxe.enableMethodsView": {
					"description": "Enable the \"Haxe Methods\" tree view in the explorer (shows --times output for the different Haxe JSON-RPC methods).",
					"type": "boolean",
					"default": false
				},
				"haxe.enableSignatureHelpDocumentation": {
					"description": "Whether signature help should include documentation or not.",
					"type": "boolean",
					"default": true
				},
				"haxe.diagnosticsPathFilter": {
					"description": "A regex that paths of source files have to match to be included in diagnostics. Defaults to \"${workspaceRoot}\" so only files within your workspace are included. You can use \"${haxelibPath}/<library-name>\" to only show results for a specific haxelib. Use \".*?\" to see all results, including haxelibs.",
					"type": "string",
					"default": "${workspaceRoot}"
				},
				"haxe.buildCompletionCache": {
					"description": "Speed up completion by building the project once on startup to initialize the cache.",
					"type": "boolean",
					"default": true
				},
				"haxe.codeGeneration": {
					"description": "Options for code generation",
					"type": "object",
					"default": {},
					"additionalProperties": false,
					"properties": {
						"functions": {
							"description": "Options for generating functions",
							"type": "object",
							"default": {},
							"additionalProperties": false,
							"properties": {
								"anonymous": {
									"description": "Options for generating anonymous functions",
									"type": "object",
									"default": {},
									"additionalProperties": false,
									"properties": {
										"returnTypeHint": {
											"description": "In which case to include return type hints",
											"type": "string",
											"default": "never",
											"enum": [
												"always",
												"never",
												"non-void"
											]
										},
										"argumentTypeHints": {
											"description": "Whether to include type hints for arguments",
											"type": "boolean",
											"default": false
										},
										"useArrowSyntax": {
											"description": "Whether to use arrow function syntax (Haxe 4+)",
											"type": "boolean",
											"default": true
										},
										"explicitNull": {
											"description": "Whether to include wrap types in Null<T> even if it can be omitted (for optional arguments with `?`)",
											"type": "boolean",
											"default": false
										}
									}
								},
								"field": {
									"description": "Options for generating field-level functions",
									"type": "object",
									"default": {},
									"additionalProperties": false,
									"properties": {
										"returnTypeHint": {
											"description": "In which case to include return type hints",
											"type": "string",
											"default": "non-void",
											"enum": [
												"always",
												"never",
												"non-void"
											]
										},
										"argumentTypeHints": {
											"description": "Whether to include type hints for arguments",
											"type": "boolean",
											"default": true
										},
										"placeOpenBraceOnNewLine": {
											"description": "Whether to place { in a new line",
											"type": "boolean",
											"default": false
										},
										"explicitPublic": {
											"description": "Whether to include the public visibility modifier even if it can be omitted",
											"type": "boolean",
											"default": false
										},
										"explicitPrivate": {
											"description": "Whether to include the private visibility modifier even if it can be omitted",
											"type": "boolean",
											"default": false
										},
										"explicitNull": {
											"description": "Whether to include wrap types in Null<T> even if it can be omitted (for optional arguments with `?`)",
											"type": "boolean",
											"default": false
										}
									}
								}
							}
						},
						"imports": {
							"description": "Options for generating imports",
							"type": "object",
							"default": {},
							"additionalProperties": false,
							"properties": {
								"enableAutoImports": {
									"description": "Whether to insert an import automatically when selecting a not-yet-imported type from completion. If false, the fully qualified name is inserted instead.",
									"type": "boolean",
									"default": true
								},
								"style": {
									"description": "How to deal with module subtypes when generating imports.",
									"type": "string",
									"default": "type",
									"enum": [
										"type",
										"module"
									],
									"enumDescriptions": [
										"Import only the specific sub-type (import pack.Foo.Type).",
										"Import the entire module the sub-type lives in (import pack.Foo)."
									]
								}
							}
						}
					}
				},
				"haxe.exclude": {
					"description": "A list of dot paths (packages, modules, types) to hide from code completion.",
					"type": "array",
					"default": [
						"zpp_nape"
					]
				}
			}
		},
		"commands": [
			{
				"title": "Restart Language Server",
				"command": "haxe.restartLanguageServer",
				"category": "Haxe"
			},
			{
				"title": "Initialize VS Code Project",
				"command": "haxe.initProject",
				"category": "Haxe"
			},
			{
				"title": "Select Completion Provider",
				"command": "haxe.selectDisplayArgumentsProvider",
				"category": "Haxe"
			},
			{
				"title": "Select Configuration",
				"command": "haxe.selectDisplayConfiguration",
				"category": "Haxe"
			},
			{
				"title": "Debug Selected Configuration",
				"command": "haxe.debugSelectedConfiguration",
				"category": "Haxe"
			},
			{
				"title": "Run Global Diagnostics Check",
				"command": "haxe.runGlobalDiagnostics",
				"category": "Haxe"
			},
			{
				"title": "Toggle Code Lens",
				"command": "haxe.toggleCodeLens",
				"category": "Haxe"
			},
			{
				"title": "Refresh Dependency Explorer",
				"command": "haxe.refreshDependencies",
				"category": "Haxe"
			},
			{
				"title": "Collapse Folders in Dependency Explorer",
				"command": "haxe.collapseDependencies",
				"category": "Haxe"
			},
			{
				"title": "Switch to Queue",
				"command": "haxe.methods.switchToQueue",
				"category": "Haxe",
				"icon": {
					"light": "resources/light/list.png",
					"dark": "resources/dark/list.png"
				}
			},
			{
				"title": "Switch to Timers",
				"command": "haxe.methods.switchToTimers",
				"category": "Haxe",
				"icon": {
					"light": "resources/light/stopwatch.png",
					"dark": "resources/dark/stopwatch.png"
				}
			},
			{
				"title": "Collapse All",
				"command": "haxe.methods.collapseAll",
				"category": "Haxe",
				"icon": {
					"light": "resources/light/collapseAll.svg",
					"dark": "resources/dark/collapseAll.svg"
				}
			},
			{
				"title": "Copy",
				"command": "haxe.methods.copy",
				"category": "Haxe"
			},
			{
				"title": "Track Outputs for this Method",
				"command": "haxe.methods.track",
				"category": "Haxe"
			},
			{
				"title": "Refresh",
				"command": "haxe.dependencies.refresh",
				"category": "Haxe",
				"icon": {
					"light": "resources/light/refresh.svg",
					"dark": "resources/dark/refresh.svg"
				}
			},
			{
				"title": "Collapse All",
				"command": "haxe.dependencies.collapseAll",
				"category": "Haxe",
				"icon": {
					"light": "resources/light/collapseAll.svg",
					"dark": "resources/dark/collapseAll.svg"
				}
			},
			{
				"title": "Open Preview",
				"command": "haxe.dependencies.openPreview",
				"category": "Haxe"
			},
			{
				"title": "Open to the Side",
				"command": "haxe.dependencies.openToTheSide",
				"category": "Haxe"
			},
			{
				"title": "Reveal in Explorer",
				"command": "haxe.dependencies.revealInExplorer",
				"category": "Haxe"
			},
			{
				"title": "Open in Command Prompt",
				"command": "haxe.dependencies.openInCommandPrompt",
				"category": "Haxe"
			},
			{
				"title": "Copy Path",
				"command": "haxe.dependencies.copyPath",
				"category": "Haxe"
			}
		],
		"languages": [
			{
				"id": "haxe",
				"aliases": [
					"Haxe",
					"haxe"
				],
				"extensions": [
					".hx"
				],
				"configuration": "./configurations/haxe.language-configuration.json"
			},
			{
				"id": "hxml",
				"aliases": [
					"HXML",
					"hxml"
				],
				"extensions": [
					".hxml"
				],
				"configuration": "./configurations/hxml.language-configuration.json"
			},
			{
				"id": "Haxe AST dump",
				"aliases": [
					"Haxe AST dump"
				],
				"extensions": [
					".dump"
				],
				"configuration": "./configurations/haxe.configuration.json"
			},
			{
				"id": "haxe.type"
			},
			{
				"id": "haxe.argument"
			}
		],
		"grammars": [
			{
				"language": "haxe",
				"scopeName": "source.hx",
				"path": "./syntaxes/haxe.tmLanguage"
			},
			{
				"language": "hxml",
				"scopeName": "source.hxml",
				"path": "./syntaxes/hxml.tmLanguage"
			},
			{
				"language": "Haxe AST dump",
				"scopeName": "source.hx",
				"path": "./syntaxes/haxe.tmLanguage"
			},
			{
				"language": "haxe.type",
				"scopeName": "source.hx.type",
				"path": "./syntaxes/helper/haxe-type.tmLanguage"
			},
			{
				"language": "haxe.argument",
				"scopeName": "source.hx.argument",
				"path": "./syntaxes/helper/haxe-argument.tmLanguage"
			},
			{
				"scopeName": "markdown.haxe.codeblock",
				"path": "./syntaxes/helper/haxe-markdown.tmLanguage",
				"injectTo": [
					"text.html.markdown"
				],
				"embeddedLanguages": {
					"meta.embedded.block.haxe": "haxe"
				}
			},
			{
				"scopeName": "markdown.hxml.codeblock",
				"path": "./syntaxes/helper/hxml-markdown.tmLanguage",
				"injectTo": [
					"text.html.markdown"
				],
				"embeddedLanguages": {
					"meta.embedded.block.hxml": "hxml"
				}
			}
		],
		"debuggers": [
			{
				"type": "haxe",
				"enableBreakpointsFor": {
					"languageIds": [
						"haxe"
					]
				}
			}
		],
		"jsonValidation": [
			{
				"fileMatch": "haxelib.json",
				"url": "http://json.schemastore.org/haxelib"
			},
			{
				"fileMatch": "hxformat.json",
				"url": "./schemas/hxformat-schema.json"
			}
		],
		"problemPatterns": [
			{
				"name": "haxe",
				"regexp": "^(.+):(\\d+): (?:lines \\d+-(\\d+)|character(?:s (\\d+)-| )(\\d+)) : (?:(Warning) : )?(.*)$",
				"file": 1,
				"line": 2,
				"endLine": 3,
				"column": 4,
				"endColumn": 5,
				"severity": 6,
				"message": 7
			},
			{
				"name": "haxe-absolute",
				"regexp": "^(?=[a-zA-Z]:|\\/)(.+):(\\d+): (?:lines \\d+-(\\d+)|character(?:s (\\d+)-| )(\\d+)) : (?:(Warning) : )?(.*)$",
				"file": 1,
				"line": 2,
				"endLine": 3,
				"column": 4,
				"endColumn": 5,
				"severity": 6,
				"message": 7
			},
			{
				"name": "haxe-error",
				"regexp": "^(Error): (.*)$",
				"severity": 1,
				"message": 2
			},
			{
				"name": "haxe-trace",
				"regexp": "^(.+):(\\d+): (.*)$",
				"file": 1,
				"line": 2,
				"message": 3
			}
		],
		"problemMatchers": [
			{
				"name": "haxe",
				"owner": "haxe",
				"source": "tasks",
				"applyTo": "allDocuments",
				"fileLocation": [
					"relative",
					"${cwd}"
				],
				"pattern": "$haxe"
			},
			{
				"name": "haxe-absolute",
				"owner": "haxe",
				"source": "tasks",
				"applyTo": "allDocuments",
				"fileLocation": "absolute",
				"pattern": "$haxe-absolute"
			},
			{
				"name": "haxe-error",
				"owner": "haxe",
				"source": "tasks",
				"applyTo": "allDocuments",
				"pattern": "$haxe-error"
			},
			{
				"name": "haxe-trace",
				"owner": "haxe",
				"source": "tasks",
				"applyTo": "allDocuments",
				"fileLocation": [
					"relative",
					"${cwd}"
				],
				"severity": "info",
				"pattern": "$haxe-trace"
			}
		],
		"views": {
			"explorer": [
				{
					"id": "haxe.methods",
					"name": "Haxe Methods",
					"when": "vshaxeActivated && enableHaxeMethodsView"
				},
				{
					"id": "haxe.dependencies",
					"name": "Haxe Dependencies",
					"when": "vshaxeActivated"
				}
			]
		},
		"menus": {
			"view/title": [
				{
					"command": "haxe.methods.switchToQueue",
					"when": "view == haxe.methods && haxeMethodsViewType == timers",
					"group": "navigation@1"
				},
				{
					"command": "haxe.methods.switchToTimers",
					"when": "view == haxe.methods && haxeMethodsViewType == queue",
					"group": "navigation@1"
				},
				{
					"command": "haxe.methods.collapseAll",
					"when": "view == haxe.methods",
					"group": "navigation@2"
				},
				{
					"command": "haxe.dependencies.refresh",
					"when": "view == haxe.dependencies",
					"group": "navigation@1"
				},
				{
					"command": "haxe.dependencies.collapseAll",
					"when": "view == haxe.dependencies",
					"group": "navigation@2"
				}
			],
			"view/item/context": [
				{
					"command": "haxe.methods.copy",
					"when": "view == haxe.methods",
					"group": "1_vshaxe@1"
				},
				{
					"command": "haxe.methods.track",
					"when": "vshaxeDebugToolsActivated && view == haxe.methods",
					"group": "1_vshaxe@2"
				},
				{
					"command": "haxe.dependencies.openPreview",
					"when": "view == haxe.dependencies && viewItem == file.md",
					"group": "1_vshaxe@1"
				},
				{
					"command": "haxe.dependencies.openToTheSide",
					"when": "view == haxe.dependencies && viewItem =~ /(file\\.*)/",
					"group": "1_vshaxe@2"
				},
				{
					"command": "haxe.dependencies.revealInExplorer",
					"when": "view == haxe.dependencies && viewItem =~ /(folder|file\\.*)/",
					"group": "1_vshaxe@3"
				},
				{
					"command": "haxe.dependencies.openInCommandPrompt",
					"when": "view == haxe.dependencies && viewItem =~ /(folder|file\\.*)/",
					"group": "1_vshaxe@4"
				},
				{
					"command": "haxe.dependencies.copyPath",
					"when": "view == haxe.dependencies && viewItem =~ /(folder|file\\.*)/",
					"group": "2_vshaxe@1"
				}
			],
			"commandPalette": [
				{
					"command": "haxe.methods.switchToQueue",
					"when": "false"
				},
				{
					"command": "haxe.methods.switchToTimers",
					"when": "false"
				},
				{
					"command": "haxe.methods.collapseAll",
					"when": "false"
				},
				{
					"command": "haxe.methods.copy",
					"when": "false"
				},
				{
					"command": "haxe.methods.track",
					"when": "false"
				},
				{
					"command": "haxe.dependencies.refresh",
					"when": "false"
				},
				{
					"command": "haxe.dependencies.collapseAll",
					"when": "false"
				},
				{
					"command": "haxe.dependencies.openPreview",
					"when": "false"
				},
				{
					"command": "haxe.dependencies.openToTheSide",
					"when": "false"
				},
				{
					"command": "haxe.dependencies.revealInExplorer",
					"when": "false"
				},
				{
					"command": "haxe.dependencies.openInCommandPrompt",
					"when": "false"
				},
				{
					"command": "haxe.dependencies.copyPath",
					"when": "false"
				}
			]
		},
		"taskDefinitions": [
			{
				"type": "hxml",
				"required": [
					"file"
				],
				"properties": {
					"file": {
						"type": "string",
						"description": "The HXML file to run."
					}
				}
			},
			{
				"type": "haxe",
				"required": [
					"args"
				],
				"properties": {
					"args": {
						"type": "string",
						"description": "Which arguments to use.",
						"enum": [
							"active configuration"
						],
						"enumDescriptions": [
							"Use the arguments from the active Haxe Configuration."
						]
					}
				}
			}
		]
	},
	"__metadata": {
		"id": "774b650f-43e3-4147-a91d-6a6bc7fe0f93",
		"publisherId": "c2e45d77-17fe-4f3b-9d2d-6b29eccc8050",
		"publisherDisplayName": "nadako"
	}
}
